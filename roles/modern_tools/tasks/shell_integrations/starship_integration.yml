---
# Starship Shell Integration
# Sets up starship prompt for bash and fish shells
# Configuration comes from yast dotfile sync - only fallback if missing

- name: "Create starship config directory"
  ansible.builtin.file:
    path: "{{ target_user_home }}/.config"
    state: directory
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    mode: '0755'

- name: "Check if starship config exists (from yast dotfile sync)"
  ansible.builtin.stat:
    path: "{{ target_user_home }}/.config/starship.toml"
  register: starship_config_exists

- name: "Setup basic starship configuration (fallback only)"
  ansible.builtin.copy:
    src: "starship_basic.toml"
    dest: "{{ target_user_home }}/.config/starship.toml"
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    mode: '0644'
  when: not starship_config_exists.stat.exists

- name: "Display starship config source"
  ansible.builtin.debug:
    msg: "{% if starship_config_exists.stat.exists %}Starship config found - using existing (from yast dotfile sync){% else %}No starship config found - created basic fallback config{% endif %}"

- name: "Initialize starship in bash"
  ansible.builtin.lineinfile:
    path: "{{ target_user_home }}/.bashrc"
    line: 'eval "$(starship init bash)"'
    regexp: ".*starship init bash.*"
    state: present
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    create: true
    mode: '0644'

- name: "Create fish conf.d directory"
  ansible.builtin.file:
    path: "{{ target_user_home }}/.config/fish/conf.d"
    state: directory
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    mode: '0755'

- name: "Initialize starship in fish (separate conf.d file)"
  ansible.builtin.copy:
    dest: "{{ target_user_home }}/.config/fish/conf.d/starship.fish"
    content: |
      # Starship prompt initialization
      # Managed by thomsible
      starship init fish | source
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    mode: '0644'
