---
# Install a single GitHub tool
# Variables:
# - tool_name: Name of the tool (e.g., "lazygit")
# - tool_config: Configuration dict from github_tools_available

- name: "Check for existing installation conflicts for {{ tool_name }}"
  ansible.builtin.include_tasks: check_existing_tools.yml
  when: github_tools_check_conflicts | bool

- name: "Get latest {{ tool_name }} release from GitHub API"
  ansible.builtin.uri:
    url: "https://api.github.com/repos/{{ tool_config.repo }}/releases/latest"
    method: GET
    return_content: yes
    headers:
      Authorization: "token {{ github_token | default('') }}"
  register: tool_release_info

- name: "Extract version and download URL for {{ tool_name }}"
  ansible.builtin.set_fact:
    tool_version: "{{ tool_release_info.json.tag_name }}"
    tool_download_url: "{{ tool_release_info.json.assets | selectattr('name', 'match', tool_config.asset_pattern) | map(attribute='browser_download_url') | first }}"

- name: "Create temporary download directory for {{ tool_name }}"
  ansible.builtin.tempfile:
    state: directory
    suffix: "_{{ tool_name }}"
  register: temp_dir

- name: "Download {{ tool_name }} archive"
  ansible.builtin.get_url:
    url: "{{ tool_download_url }}"
    dest: "{{ temp_dir.path }}/{{ tool_name }}.{{ tool_config.archive_extension }}"
    mode: '0644'

- name: "Extract {{ tool_name }} archive"
  ansible.builtin.unarchive:
    src: "{{ temp_dir.path }}/{{ tool_name }}.{{ tool_config.archive_extension }}"
    dest: "{{ temp_dir.path }}"
    remote_src: yes
  when: tool_config.archive_extension != "binary"

- name: "Handle {{ tool_name }} binary file"
  ansible.builtin.copy:
    src: "{{ temp_dir.path }}/{{ tool_name }}.{{ tool_config.archive_extension }}"
    dest: "{{ temp_dir.path }}/{{ tool_name }}"
    mode: '0755'
    remote_src: yes
  when: tool_config.archive_extension == "binary"

- name: "Find {{ tool_name }} binary in extracted archive"
  ansible.builtin.find:
    paths: "{{ temp_dir.path }}"
    patterns: "{{ tool_config.binary_name | default(tool_name) }}"
    recurse: yes
    file_type: file
  register: found_binary
  when: tool_config.archive_extension != "binary"

- name: "Set {{ tool_name }} binary path for direct binary"
  ansible.builtin.set_fact:
    found_binary:
      files:
        - path: "{{ temp_dir.path }}/{{ tool_name }}"
  when: tool_config.archive_extension == "binary"

- name: "Install {{ tool_name }} binary"
  ansible.builtin.copy:
    src: "{{ found_binary.files[0].path }}"
    dest: "{{ github_tools_full_path }}/{{ tool_config.binary_name | default(tool_name) }}"
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    mode: '0755'
    remote_src: yes

- name: "Clean up temporary directory for {{ tool_name }}"
  ansible.builtin.file:
    path: "{{ temp_dir.path }}"
    state: absent
