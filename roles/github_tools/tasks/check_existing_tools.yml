---
# Check for existing tool installations to prevent conflicts
# Uses 'which -a' to find all installations and filters out our own path

- name: "Check if {{ tool_name }} is already installed elsewhere"
  ansible.builtin.shell: |
    # Use which -a to find all installations of the tool
    binary_name="{{ tool_config.binary_name | default(tool_name) }}"
    our_path="{{ github_tools_full_path }}/$binary_name"

    if command -v $binary_name >/dev/null 2>&1; then
      # Get all paths where the tool is found
      all_paths=$(which -a $binary_name 2>/dev/null || echo "")

      if [[ -n "$all_paths" ]]; then
        # Filter out our own installation path
        conflicting_paths=$(echo "$all_paths" | grep -v "^$our_path$" || true)

        if [[ -n "$conflicting_paths" ]]; then
          # Found conflicting installation(s)
          first_conflict=$(echo "$conflicting_paths" | head -1)
          echo "CONFLICT:$first_conflict"
          exit 1
        fi
      fi
    fi

    echo "NO_CONFLICT"
    exit 0
  register: tool_conflict_check
  failed_when: false
  changed_when: false

- name: "Determine conflict source for {{ tool_name }}"
  ansible.builtin.set_fact:
    tool_conflict_detected: "{{ tool_conflict_check.rc != 0 }}"
    tool_conflict_path: >-
      {%- if tool_conflict_check.rc != 0 and 'CONFLICT:' in tool_conflict_check.stdout -%}
        {{ tool_conflict_check.stdout.split(':')[1] }}
      {%- else -%}

      {%- endif -%}
    tool_conflict_source: >-
      {%- if tool_conflict_check.rc != 0 and 'CONFLICT:' in tool_conflict_check.stdout -%}
        {%- set conflict_path = tool_conflict_check.stdout.split(':')[1] -%}
        {%- if '/usr/bin/' in conflict_path -%}
          System package manager
        {%- elif '/usr/local/bin/' in conflict_path -%}
          Manual installation (/usr/local/bin)
        {%- elif '/snap/' in conflict_path -%}
          Snap package
        {%- elif '/.local/bin/' in conflict_path -%}
          User installation ({{ conflict_path }})
        {%- elif '/opt/' in conflict_path -%}
          Third-party installation (/opt)
        {%- else -%}
          Other installation ({{ conflict_path }})
        {%- endif -%}
      {%- else -%}
        None
      {%- endif -%}

- name: "CONFLICT DETECTED: {{ tool_name }} is already installed"
  ansible.builtin.fail:
    msg: |
      ⚠️  INSTALLATION CONFLICT DETECTED ⚠️

      Tool: {{ tool_name }}
      Existing location: {{ tool_conflict_path }}
      Source: {{ tool_conflict_source }}
      Description: {{ tool_config.description }}
      Target location: {{ github_tools_full_path }}/{{ tool_name }}

      The tool '{{ tool_name }}' is already installed at {{ tool_conflict_path }}.
      Installing it again would create conflicts and potentially break functionality.

      RECOMMENDED ACTIONS:
      1. Remove the existing installation:
         {%- if 'package manager' in tool_conflict_source %}
         # Remove via package manager (apt remove {{ tool_name }} or dnf remove {{ tool_name }})
         {%- elif 'Snap' in tool_conflict_source %}
         sudo snap remove {{ tool_name }}
         {%- elif 'Manual' in tool_conflict_source or 'Third-party' in tool_conflict_source %}
         sudo rm {{ tool_conflict_path }}
         {%- elif 'User installation' in tool_conflict_source %}
         rm {{ tool_conflict_path }}
         {%- else %}
         # Remove from: {{ tool_conflict_path }}
         {%- endif %}

      2. Re-run the Ansible playbook after removal

      3. Or exclude this tool from installation:
         ansible-playbook ... -e "github_tools_to_install=[list_without_{{ tool_name }}]"

      4. Or disable conflict checking (not recommended):
         ansible-playbook ... -e "github_tools_check_conflicts=false"

      This check prevents system conflicts and ensures a clean, defined state.
  when: tool_conflict_detected | bool
