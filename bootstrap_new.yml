---
# New Bootstrap Playbook f√ºr thomsible
# Neue 3-Rollen-Struktur mit expliziter Benutzer-Definition
#
# Verwendung:
#   ansible-playbook bootstrap_new.yml -e "target_user=thomas"
#   ansible-playbook bootstrap_new.yml -e "target_user=thomas" --tags "target_user_config"
#   ansible-playbook bootstrap_new.yml -e "target_user=thomas" --tags "modern_tools"

- name: "Thomsible Bootstrap - New Structure"
  hosts: localhost
  connection: local
  become: true
  gather_facts: true

  vars:
    # WICHTIG: target_user muss explizit gesetzt werden!
    # Beispiel: -e "target_user=thomas"
    
    # Service User Konfiguration
    ansible_user_name: "thomsible"
    ansible_user_ssh_pubkey: "{{ lookup('env', 'THOMSIBLE_SSH_KEY') | default('ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIaQP9YHqJ3Lq8yrqPHOT6HyVsYhp/QhgGkyo8pQ6qlm thomsible') }}"
    
    # Modern Tools Konfiguration
    tools_to_install:
      - lazygit
      - starship
      - btop
      - fzf
      - bat
      - eza
      - fd
      - ripgrep
      - dust
      - procs
      - zoxide
      - atuin
      - tealdeer
      - duf
      - gping
      - dog
      - termshark
      - topgrade
    
    # Features aktivieren
    create_shell_aliases: true
    install_system_tools: true
    configure_git: true
    setup_shell_integration: true
    github_tools_check_conflicts: true
    
    # GitHub Token (optional f√ºr h√∂here API-Limits)
    github_token: "{{ lookup('env', 'GITHUB_TOKEN') | default('') }}"

  pre_tasks:
    - name: "Validate target_user is defined"
      ansible.builtin.fail:
        msg: |
          ‚ùå target_user muss explizit definiert werden!
          
          Beispiele:
          ansible-playbook bootstrap_new.yml -e "target_user=thomas"
          ansible-playbook bootstrap_new.yml -e "target_user=root"
          
          KEINE Auto-Erkennung mehr aus Sicherheitsgr√ºnden!
      when: target_user is not defined or target_user == ""

    - name: "Display bootstrap configuration"
      ansible.builtin.debug:
        msg: |
          üöÄ THOMSIBLE BOOTSTRAP - NEW STRUCTURE üöÄ
          
          Target machine: {{ inventory_hostname }}
          Current user: {{ ansible_user_id }}
          Target user: {{ target_user }}
          Service user: {{ ansible_user_name }}
          OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          
          This will:
          1. Create service user ({{ ansible_user_name }}) - hidden from login
          2. Configure target user ({{ target_user }}) - fish shell + PATH
          3. Install {{ tools_to_install | length }} modern CLI tools
          4. Setup shell aliases and integrations
          
          Press Ctrl+C to abort if this is not correct.

    - name: "Pause for confirmation"
      ansible.builtin.pause:
        prompt: "Continue with bootstrap? (Press Enter to continue, Ctrl+C to abort)"
        seconds: 10

  roles:
    # Phase 1: Service User (Ansible Automation)
    - role: service_user
      tags: [service_user, phase1]
      when: create_service_user | default(true)

    # Phase 2: Target User Configuration  
    - role: target_user_config
      tags: [target_user_config, phase2]

    # Phase 3: Modern Tools Installation
    - role: modern_tools
      tags: [modern_tools, phase3]

  post_tasks:
    - name: "Bootstrap completion summary"
      ansible.builtin.debug:
        msg: |
          ‚úÖ BOOTSTRAP COMPLETED SUCCESSFULLY! ‚úÖ
          
          üéØ What was configured:
          {% if create_service_user | default(true) %}
          - Service user: {{ ansible_user_name }} (hidden from login)
          {% endif %}
          - Target user: {{ target_user }} (fish shell, PATH configured)
          - {{ tools_to_install | length }} modern CLI tools installed
          {% if create_shell_aliases %}
          - Shell aliases: cat‚Üíbat, ls‚Üíeza, du‚Üídust, etc.
          {% endif %}
          - Git configured for {{ target_user }}
          - System tools: ncdu, lshw, mtr, glances, dstat, etc.
          
          üöÄ Next steps:
          1. Logout and login again (or: exec $SHELL)
          2. Test tools: lazygit --version, btop --version
          3. Try aliases: cat README.md, ls -la
          4. Setup atuin: atuin register, atuin login
          
          üìö Documentation: README.md and docs/ folder

    - name: "Show useful commands"
      ansible.builtin.debug:
        msg: |
          üí° Useful commands to try:
          
          # Modern replacements
          lazygit          # Terminal Git UI
          btop             # System monitor  
          bat README.md    # Syntax highlighting
          eza -la          # Modern ls with icons
          fd "*.yml"       # Fast file search
          rg "ansible"     # Fast text search
          dust             # Disk usage analyzer
          duf              # Disk usage overview
          
          # Navigation & History
          z <directory>    # Smart directory jumping
          atuin search     # Searchable shell history
          
          # System tools
          tg               # Update all packages
          tldr <command>   # Quick help pages
